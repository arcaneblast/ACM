#include <iostream>
#include <string.h>
#include <vector>
#include <string>
#include <queue>
#include <cstdlib>
#include <stdio.h>
#include <functional>
#include <algorithm>
#include <sstream>
#define INF 20000000
using namespace std;

int dist[5005];
int graph[5005][5005];
int mf, f, s, t, V; 
int p[5005];

void augment(int v, int minEdge) 
{
    if (v == s)
    {
        f = minEdge;
        return;
    } 
    else if (p[v] != -1) 
    {
        augment(p[v], min(minEdge, graph[p[v]][v]));
        graph[p[v]][v] -= f;
        graph[v][p[v]] += f;
    }
}

void BFS() 
{
    for (int i = 0; i <= V; i++)
        dist[i] = INF;
    dist[s] = 0;
    queue<int> q;
    q.push(s);
    for (int i = 0; i <= V; i++)
        p[i] = -1;
    while (!q.empty()) 
    {
        int u = q.front();
        q.pop();
        if (u == t)
            break;
        for (int v = 1; v <= V; v++) 
        {
            if (graph[u][v] > 0 && dist[v] == INF) {
                dist[v] = dist[u] + 1;
                q.push(v);
                p[v] = u;
            }
        }
    }
}

void max_flow() {
    mf = 0;
    while (1) {
        f = 0;
        BFS();
        augment(t, INF);
        if (f == 0)
            break;
        mf += f;
    }
}

int main()
{
    //freopen("in.txt","r",stdin);
    //freopen("out.txt","w",stdout);
    int n;
    cin>>V>>n;
        s=1;
        t=V;
        for(int i=0;i<n;i++)
        {
            int v1,v2,c;
            cin>>v1>>v2>>c;
            graph[v1][v2]+=c;
            graph[v2][v1]+=c;
        }
        max_flow();
        cout<<mf<<endl;
}
