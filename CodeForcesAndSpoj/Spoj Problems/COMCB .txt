#include <cstdlib>
#include <iostream>
#include <vector>
#include <cstdio>
#include <string.h>
#include <string>
#include <map>
#include <math.h>
#include <sstream>
#include <queue>
#include <set>
#include <stack>
#include <cmath>
#include <algorithm>
#include <list>
#include <deque>
#include <utility>
#define mp  make_pair
#define pb  push_back
#define eps 1e-9
#define iseq(a,b) (fabs(a-b)<eps)
#define readfiles freopen("in.txt","r",stdin); freopen("out.txt","w",stdout)
#define readfile freopen("in.txt","r",stdin)
#define fastio ios::sync_with_stdio(false)
#define oo 0x7fffffff
#define forv(i,v) for(int i=0;i<v.size();i++)
#define all(v) v.begin(),v.end()
#define OO 0x7fffffffffffffff
#define readcases int cases;cin>>cases;while(cases--)
 
//vertex spliting 
#define in_node(x) x
#define out_node(x) x+n
 
//graph coloring
#define UNCOLORED -1
#define BLACK 0
#define WHITE 1 
 
//biparite 
#define Left_P(x) x
#define Right_P(x) n+x
 
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int uint;
typedef pair<ll, pair<int, int> > edge;
 
int n,m;
int A[]={-1,1,-2,2,-2,2,-1,1};
int B[]={-2,-2,-1,-1,1,1,2,2};
bool visited[26][26];
stack< pair<char,int> > path;
bool backTrack(int x,int y,int co){
    visited[x][y]=true;
    if(co==n*m)
        return true;
    else{
        for(int i=0;i<8;i++){
            int newx=x+A[i];
            int newy=y+B[i];
            if(newx<n&&newx>=0&&newy>=0&&newy<m&&!visited[newx][newy]){
                if(backTrack(newx,newy,co+1)){
                    path.push(mp((char)(newy+'A'),newx+1));
                    return true;
                }
            }
        }
    }
    visited[x][y]=false;
    return false;
}
int main() {
#ifndef ONLINE_JUDGE 
    readfiles;
    double startTime = clock();
#endif
    int cases;
    cin>>cases;
    while(cases--){
        memset(visited,0,sizeof visited);
        while(!path.empty())
            path.pop();
        cin>>n>>m;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(backTrack(i,j,1)){
                    path.push(mp((char)(j+'A'),i+1));
                    break;
                }
            }
        }
        if(path.size()){
            while(!path.empty()){
                cout<<path.top().first<<path.top().second;
                path.pop();
            }
            cout<<endl;
        }
        else{
            cout<<"-1"<<endl;
        }
    }
#ifndef ONLINE_JUDGE
    cout << "Runtime is : " << (clock() - startTime) / CLOCKS_PER_SEC << endl;
#endif
} 