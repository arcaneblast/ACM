#include <cstdlib>
#include <iostream>
#include <vector>
#include <cstdio>
#include <string.h>
#include <string>
#include <map>
#include <math.h>
#include <sstream>
#include <queue>
#include <set>
#include <stack>
#include <cmath>
#include <algorithm>
#include <list>
#include <deque>
#include <utility>
#define mp  make_pair
#define pb  push_back
#define eps 1e-9
#define iseq(a,b) (fabs(a-b)<eps)
#define readfiles freopen("in.txt","r",stdin); freopen("out.txt","w",stdout)
#define readfile freopen("in.txt","r",stdin)
#define fastio ios::sync_with_stdio(false)
#define oo 0x7fffffff
#define forv(i,v) for(int i=0;i<v.size();i++)
#define all(v) v.begin(),v.end()
#define OO 0x7fffffffffffffff
#define readcases int cases;cin>>cases;while(cases--)
 
//vertex spliting 
#define in_node(x) x
#define out_node(x) x+n
 
//graph coloring
#define UNCOLORED -1
#define BLACK 0
#define WHITE 1 
 
//biparite 
#define Left_P(x) x
#define Right_P(x) n+x
 
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int uint;
typedef pair<ll, pair<int, int> > edge;
 
 
struct DSU{
    int rep[20005];
    int len[20005];
    DSU(int n){
        for(int i=0;i<n;i++)
            rep[i]=i,len[i]=0;
    }
    int findSet(int a){
        if(a!=rep[a]){
            int temp=rep[a];
            rep[a]=findSet(rep[a]);
            len[a]+=len[temp];
        }
        return rep[a];
    }
    void unionSet(int down,int up){
        int x=findSet(down);
        int y=findSet(up);
        if(x!=y){
            rep[down]=up;
            len[down]=abs(down-up)%1000;
        }
    }
}; 
 
int main() {
#ifndef ONLINE_JUDGE 
    readfiles;
    double startTime = clock();
#endif
    int cases;
    cin>>cases;
    while(cases--){
        int n;cin>>n;
        DSU dsu(n+5);
        char c;
        while(cin>>c&&c!='O'){
            if(c=='I'){
                int u,v;
                cin>>u>>v;
                dsu.unionSet(u,v);
            }
            else{
                int u;cin>>u;
                dsu.findSet(u);
                cout<<dsu.len[u]<<endl;
            }
        }
    }
#ifndef ONLINE_JUDGE
    cout << "Runtime is : " << (clock() - startTime) / CLOCKS_PER_SEC << endl;
#endif
} 