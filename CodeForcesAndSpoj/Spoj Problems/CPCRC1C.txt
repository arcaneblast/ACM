#include <cstdlib>
#include <iostream>
#include <vector>
#include <cstdio>
#include <string.h>
#include <string>
#include <map>
#include <math.h>
#include <sstream>
#include <queue>
#include <set>
#include <stack>
#include <cmath>
#include <algorithm>
#include <list>
#include <deque>
#include <utility>
#define mp  make_pair
#define pb  push_back
#define eps 1e-9
#define iseq(a,b) (fabs(a-b)<eps)
#define readfiles freopen("in.txt","r",stdin); freopen("out.txt","w",stdout)
#define readfile freopen("in.txt","r",stdin)
#define fastio ios::sync_with_stdio(false)
#define oo 0x7fffffff
#define forv(i,v) for(int i=0;i<v.size();i++)
#define all(v) v.begin(),v.end()
#define OO 0x7fffffffffffffff
#define readcases int cases;cin>>cases;while(cases--)
 
//vertix spliting 
#define in_node(x) x
#define out_node(x) x+n
 
//graph coloring
#define UNCOLORED -1
#define BLACK 0
#define WHITE 1 
 
#define moder 1000000007
 
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int uint;
typedef pair<ll, pair<int, int> > edge;
 
ll tens[20] = {0};
 
void precalc() {
    tens[0] = 0;
    tens[1] = 45;
    for (int i = 2; i < 16; i++) {
        tens[i] = tens[i - 1]*10 + tens[1] * pow(10, i - 1);
    }
}
 
ll cnt(ll n) {
    int num_digits = (int) (1 + log10(n));
    int digits[20] = {0};
    int k = num_digits - 1;
    ll nn=n;
    while (nn / 10) {
        digits[k] = nn % 10;
        nn /= 10;
        k--;
    }
    digits[k] = nn;
    if (digits[0] == 1) {
        return tens[num_digits - 1];
    } else {
        return tens[num_digits - 1] * digits[0] + pow(10, num_digits - 1)*(((digits[0] - 1) * digits[0]) / 2);
    }
}
 
bool reducable(ll n) {
    int num_digits = (int) (1 + log10(n));
    int digits[20] = {0};
    int k = num_digits - 1;
    while (n / 10) {
        digits[k] = n % 10;
        n /= 10;
        k--;
    }
    digits[k] = n;
    bool all_zeros = true;
    for (int i = 1; i < num_digits; i++) {
        if (digits[i] != 0) {
            all_zeros = false;
            break;
        }
    }
    return (all_zeros && digits[0] != 0);
}
 
ll func(ll n) {
    if (n / 10 == 0) {
        return ((n)*(n - 1)) / 2;
    } else if (reducable(n)) {
        return cnt(n);
    } else {
        int num_digits = (int) (1 + log10(n));
        int digits[20] = {0};
        int cum_digits[20] = {0};
        int k = num_digits - 1;
        int zeros = 0;
        while (n / 10) {
            digits[k] = n % 10;
            n /= 10;
            k--;
        }
        digits[k] = n;
        cum_digits[0] = digits[0];
        for (int i = 1; i < num_digits; i++)
            cum_digits[i] = digits[i] + cum_digits[i - 1];
        int cut;
        for (cut = num_digits-1; cut >= 0; cut--) {
            if (digits[cut] != 0)
                break;
            zeros++;
        }
        ll nextnum = 0;
        int old_digit_at_cut=digits[cut];
        digits[cut]=0;
        for (int i = num_digits-1; i >= 0; i--) {
            nextnum += digits[i] * pow(10, num_digits-1-i);
        }
        return old_digit_at_cut * pow(10, zeros) * cum_digits[cut-1] + func(old_digit_at_cut * pow(10, zeros)) + func(nextnum);
    }
}
 
int main() {
#ifndef ONLINE_JUDGE 
    readfiles;
    double startTime = clock();
#endif
    ll a, b;
    precalc();
    while (cin>>a>>b&&!(a==-1&&b==-1)) {
        ll b_digits = 0;
        ll bb = b;
        while (bb / 10) {
            b_digits += bb % 10;
            bb /= 10;
        }
        b_digits += bb;
        cout << func(b) - func(a) + b_digits << endl;
    }
#ifndef ONLINE_JUDGE
    cout << "Runtime is : " << (clock() - startTime) / CLOCKS_PER_SEC << endl;
#endif
} 