#include <cstdlib>
#include <iostream>
#include <vector>
#include <cstdio>
#include <string.h>
#include <string>
#include <map>
#include <math.h>
#include <sstream>
#include <queue>
#include <set>
#include <stack>
#include <cmath>
#include <algorithm>
#include <list>
#include <deque>
#include <utility>
#define mp  make_pair
#define pb  push_back
#define eps 1e-9
#define iseq(a,b) (fabs(a-b)<eps)
#define readfiles freopen("in.txt","r",stdin); freopen("out.txt","w",stdout)
#define readfile freopen("in.txt","r",stdin)
#define fastio ios::sync_with_stdio(false)
#define oo 0x7fffffff
#define forv(i,v) for(int i=0;i<v.size();i++)
#define all(v) v.begin(),v.end()
#define OO 0x7fffffffffffffff
#define readcases int cases;cin>>cases;while(cases--)

//vertex spliting 
#define in_node(x) x
#define out_node(x) x+n

//graph coloring
#define UNCOLORED -1
#define BLACK 0
#define WHITE 1 

//biparite 
#define Left_P(x) x
#define Right_P(x) n+x

using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int uint;
typedef pair<ll, pair<int, int> > edge;

int M[405][405];
int G[405][405];
int match[405];
vector<int> S[405];
bool visited[405];
map<int, ll> m;
int n;

int aug(int l) {
    if (visited[l])
        return 0;
    visited[l] = true;
    for (int i = Right_P(0); i < Right_P(n); i++) {
        if (G[l][i]) {
            int r = i;
            if (match[r] == -1 || aug(match[r])) {
                match[r] = l;
                match[l] = r;
                return 1;
            }
        }
    }
    return 0;
}

int clearShit() {
    set<ll> elems;
    for (int i = 0; i < n; i++) {
        ll temp;
        cin>>temp;
        elems.insert(temp);
    }
    int i = 0;
    for (set<ll>::iterator it = elems.begin(); it != elems.end(); it++) {
        m[i] = (*it);
        i++;
    }
    return i;
}

void buildS() {
    memset(visited, 0, sizeof visited);
    int V = 0;
    //build s0
    for (int i = 0; i < 2 * n; i++) {
        if (match[i] == -1) {
            S[0].pb(i);
            visited[i] = 1;
            V++;
        }
    }
    for (int i = 1; i <= 2 * n && V != 2 * n; i++) {
        if (i % 2 == 1) {
            bool added = false;
            for (int j = 0; j < S[i - 1].size(); j++) {
                int v = S[i - 1][j];
                for (int k = 0; k < Right_P(n); k++) {
                    if (G[v][k]&&!visited[k]) {
                        S[i].pb(k);
                        visited[k] = 1;
                        V++;
                        added = true;
                    }
                }
            }
            if (!added) {
                for (int j = 0; j < 2 * n; j++) {
                    if (!visited[j]) {
                        S[i].pb(j);
                        visited[j] = 1;
                        V++;
                        break;
                    }
                }
            }
        } else {
            for (int j = 0; j < S[i - 1].size(); j++) {
                int v = S[i - 1][j];
                for (int k = 0; k < Right_P(n); k++) {
                    if (M[v][k]&&!visited[k]) {
                        S[i].pb(k);
                        visited[k] = 1;
                        V++;
                    }
                }
            }
        }
    }
}

int main() {
#ifndef ONLINE_JUDGE 
    readfiles;
    double startTime = clock();
#endif
    cin>>n;
    memset(M, 0, sizeof M);
    memset(G, 0, sizeof G);
    memset(match, -1, sizeof match);
    n = clearShit();
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (i != j) {
                ll a = m[i];
                ll b = m[j];
                if (b % a == 0) {
                    G[i][Right_P(j)] = 1;
                    G[Right_P(j)][i] = 1;
                }
            }
        }
    }
    for (int i = 0; i < n; i++) {
        memset(visited, 0, sizeof visited);
        aug(i);
    }
    for(int i=0;i<2*n;i++){
        if(match[i]!=-1){
            M[i][match[i]]=1;
        }
    }
    for (int i = 0; i < 2 * n; i++) {
        for (int j = 0; j < 2 * n; j++) {
            if (M[i][j]) {
                G[i][j] = 0;
            }
        }
    }
    // calculating S0,S1,S2...
    buildS();

    //result
    set<ll> ss;
    for (int i = 1; i <= 2 * n; i += 2) {
        for (int j = 0; j < S[i].size(); j++) {
            ss.insert(S[i][j]);
        }
    }
    vector<ll> res;
    for (int i = 0; i < n; i++) {
        if (ss.find(i) == ss.end() && ss.find(Right_P(i)) == ss.end()) {
            res.pb(m[i]);
        }
    }
    cout << res.size() << endl;
    for (int i = 0; i < res.size(); i++) {
        cout << res[i] << " \n"[i == res.size() - 1];
    }
#ifndef ONLINE_JUDGE
    cout << "Runtime is : " << (clock() - startTime) / CLOCKS_PER_SEC << endl;
#endif
}