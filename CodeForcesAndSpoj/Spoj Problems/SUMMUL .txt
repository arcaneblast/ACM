#include <iostream>
#include <vector>
#include <cstdio>
#include <string.h>
#include <string>
#include <map>
#include <math.h>
#include <sstream>
#include <queue>
#include <set>
#include <stack>
#include <cmath>
#include <algorithm>
#include <list>
#include <deque>
#include <utility>
#define mp  make_pair
#define pb  push_back
#define eps 1e-9
#define Sqr(x) ((x)*(x))
#define iseq(a,b) (fabs(a-b)<eps)
#define readfiles freopen("in.txt","r",stdin); freopen("out.txt","w",stdout)
#define readfile freopen("in.txt","r",stdin)
#define fastio ios::sync_with_stdio(false)
#define oo 0x7fffffff
#define forv(i,v) for(int i=0;i<v.size();i++)
#define all(v) v.begin(),v.end()
#define OO 0x7fffffffffffffff
#define readcases int cases;cin>>cases;while(cases--)
 
//vertex spliting 
#define in_node(x) x
#define out_node(x) x+n
 
//graph coloring
#define UNCOLORED -1
#define BLACK 0
#define WHITE 1 
 
//biparite 
#define Left_P(x) x
#define Right_P(x) n+x
 
#define moder 1000000007
 
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int uint;
typedef pair<ll, pair<int, int> > edge;
 
#define MAXN 2
 
struct matrix {
public:
    ll data[2][2];
 
    matrix() {
        memset(data, 0, sizeof data);
    }
 
    matrix(ll d[2][2]) {
        data[0][0] = d[0][0];
        data[0][1] = d[0][1];
        data[1][0] = d[1][0];
        data[1][1] = d[1][1];
    }
 
    matrix mult(matrix b) {
        matrix temp;
        for (int i = 0; i < MAXN; i++) {
            for (int j = 0; j < MAXN; j++) {
                for (int k = 0; k < MAXN; k++) {
                    temp.data[i][j] += (this->data[i][k] * b.data[k][j]) % moder;
                    temp.data[i][j] %= moder;
                }
            }
        }
        return temp;
    }
 
    matrix identity() {
        matrix I;
        for (int i = 0; i < MAXN; i++)
            I.data[i][i] = 1;
        return I;
    }
 
    matrix pow(ll p) {
        matrix res(this->data);
        matrix ret = this->identity();
        while (p) {
            if (p % 2) {
                ret = ret.mult(res);
                p--;
            } else {
                res = res.mult(res);
                p >>= 1;
            }
        }
        return ret;
    }
};
 
int main() {
#ifndef ONLINE_JUDGE 
  //  readfiles;
 //   double startTime = clock();
#endif
    int cases;
    cin>>cases;
    ll n;
    while (cases--) {
        cin>>n;
        if (n > 2) {
            ll transd[2][2] = {
                {1, 1},
                {1, 2}
            };
            ll initd[2][2] = {
                {1, 2},
                {0, 0}
            };
            matrix trans(transd);
            matrix init(initd);
            trans = trans.pow(n - 1);
            matrix final = init.mult(trans);
            ll ans = (final.data[0][0]-n+moder) % moder;
            cout<<ans<<endl;
        } else {
            if(n==1)cout<<0<<endl;
            else cout<<1<<endl;
        }
    }
#ifndef ONLINE_JUDGE
 //   cout << "Runtime is : " << (clock() - startTime) / CLOCKS_PER_SEC << endl;
#endif
} 